
import base64

encoded_code = "aW1wb3J0IHN0cmVhbWxpdCBhcyBzdAppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHRpbWUKZnJvbSBQSUwgaW1wb3J0IEltYWdlLCBJbWFnZUZpbHRlcgpmcm9tIHNraW1hZ2UgaW1wb3J0IHV0aWwKaW1wb3J0IHJhbmRvbQpmcm9tIGlvIGltcG9ydCBCeXRlc0lPCmltcG9ydCBiYXNlNjQKCnN0LnNldF9wYWdlX2NvbmZpZyhwYWdlX3RpdGxlPSJJbWFnZSBEaXN0b3J0aW9uIFN0dWRpbyIsIGxheW91dD0iY2VudGVyZWQiKQoKc3QubWFya2Rvd24oIjxoMSBzdHlsZT0ndGV4dC1hbGlnbjogY2VudGVyOyBjb2xvcjogI0ZGNkY2MTsnPvCfjIAgUHJvamVjdDwvaDE+IiwgdW5zYWZlX2FsbG93X2h0bWw9VHJ1ZSkKc3QubWFya2Rvd24oIlVwbG9hZCB0byBNT0RFTCIpCgp1cGxvYWRlZF9maWxlID0gc3QuZmlsZV91cGxvYWRlcigi8J+TpCBVcGxvYWQiLCB0eXBlPVsicG5nIiwgImpwZyIsICJqcGVnIl0pCgojIENoZWNrIGlmIHRoZSB1cGxvYWRlZCBmaWxlIGlzIGFuIGltYWdlIG9mIHRoZSBjb3JyZWN0IHR5cGUKaWYgdXBsb2FkZWRfZmlsZToKICAgIGZpbGVfZXh0ZW5zaW9uID0gdXBsb2FkZWRfZmlsZS5uYW1lLnNwbGl0KCcuJylbLTFdLmxvd2VyKCkKICAgIAogICAgaWYgZmlsZV9leHRlbnNpb24gbm90IGluIFsicG5nIl06CiAgICAgICAgIyBTaG93IGEgbWVzc2FnZSBmb3Igbm9uLVBORyBmaWxlcwogICAgICAgIHN0LmVycm9yKCLimqDvuI8gU2Vuc2l0aXZlIGltYWdlIG5vdCBmb3VuZC4iKQogICAgZWxzZToKICAgICAgICAjIEFJIHNpbXVsYXRpb24KICAgICAgICBhaV9waHJhc2VzID0gWwogICAgICAgICAgICAiRXh0cmFjdGluZyBjb252b2x1dGlvbmFsIGVkZ2UgbWFwcy4uLiIsCiAgICAgICAgICAgICJGb3J3YXJkIHByb3BhZ2F0aW5nIHRocm91Z2ggOCBoaWRkZW4gbGF5ZXJzLi4uIiwKICAgICAgICAgICAgIkFwcGx5aW5nIGJhdGNoIG5vcm1hbGl6YXRpb24gYW5kIFJlTFUuLi4iLAogICAgICAgICAgICAiR2VuZXJhdGluZyBzeW50aGV0aWMgZmlsdGVycy4uLiIsCiAgICAgICAgICAgICJBbmFseXppbmcgd2l0aCBWR0ctMTYgcHJldHJhaW5lZCB3ZWlnaHRzLi4uIiwKICAgICAgICAgICAgIlJ1bm5pbmcgcGl4ZWwtd2lzZSBzZWdtZW50YXRpb24uLi4iLAogICAgICAgICAgICAiRW5oYW5jaW5nIGZlYXR1cmUgdmVjdG9ycy4uLiIsCiAgICAgICAgICAgICJNYXBwaW5nIGxhdGVudCBzcGFjZSBjbHVzdGVycy4uLiIsCiAgICAgICAgICAgICJUcmFpbmluZyBkZW5zZSByZXNpZHVhbHMuLi4iLAogICAgICAgICAgICAiSW5qZWN0aW5nIEdhdXNzaWFuIG5vaXNlIGludG8gdGVuc29ycy4uLiIsCiAgICAgICAgICAgICJNYXRjaGluZyBjbGFzc2VzIHdpdGggSW1hZ2VOZXQgZW1iZWRkaW5ncy4uLiIsCiAgICAgICAgICAgICJGaW5hbGl6aW5nIENOTiBjbGFzc2lmaWNhdGlvbiBsb2dpdHMuLi4iCiAgICAgICAgXQoKICAgICAgICAjIFNwaW5uZXIgYW5pbWF0aW9uCiAgICAgICAgc3QubWFya2Rvd24oIiIiCiAgICAgICAgPHN0eWxlPgogICAgICAgIC5sb2FkZXIgewogICAgICAgICAgICBib3JkZXI6IDRweCBzb2xpZCAjZjNmM2YzOwogICAgICAgICAgICBib3JkZXItdG9wOiA0cHggc29saWQgIzM0OThkYjsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgICAgICAgICB3aWR0aDogMjBweDsKICAgICAgICAgICAgaGVpZ2h0OiAyMHB4OwogICAgICAgICAgICBhbmltYXRpb246IHNwaW4gMXMgbGluZWFyIGluZmluaXRlOwogICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDsKICAgICAgICB9CiAgICAgICAgQGtleWZyYW1lcyBzcGluIHsKICAgICAgICAgICAgMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfQogICAgICAgICAgICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfQogICAgICAgIH0KICAgICAgICA8L3N0eWxlPgogICAgICAgICIiIiwgdW5zYWZlX2FsbG93X2h0bWw9VHJ1ZSkKCiAgICAgICAgZGVmIGZsYXNoeV9haV9zaW11bGF0aW9uKCk6CiAgICAgICAgICAgIHByb2dyZXNzX3RleHQgPSBzdC5lbXB0eSgpCiAgICAgICAgICAgIGZvciBwaHJhc2UgaW4gYWlfcGhyYXNlczoKICAgICAgICAgICAgICAgIHByb2dyZXNzX3RleHQubWFya2Rvd24oCiAgICAgICAgICAgICAgICAgICAgZiI8aDMgc3R5bGU9J3RleHQtYWxpZ246IGxlZnQ7IGNvbG9yOiAjMDBGRkFBOyBkaXNwbGF5OiBmbGV4OyBhbGlnbi1pdGVtczogY2VudGVyOyc+IgogICAgICAgICAgICAgICAgICAgIGYiPHNwYW4gY2xhc3M9J2xvYWRlcic+PC9zcGFuPiB7cGhyYXNlfTwvaDM+IiwgdW5zYWZlX2FsbG93X2h0bWw9VHJ1ZQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxMCkgICMgRGlzcGxheSBlYWNoIHBocmFzZSBmb3IgMTAgc2Vjb25kcwogICAgICAgICAgICBwcm9ncmVzc190ZXh0LmVtcHR5KCkKCiAgICAgICAgZGVmIGZha2VfbW9kZWxfcHJvY2Vzc2luZygpOgogICAgICAgICAgICB3aXRoIHN0LnNwaW5uZXIoIvCfp6AgQW5hbHl6aW5nIGltYWdlIHdpdGggQUkgbW9kZWwuLi4iKToKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMiArIHJhbmRvbS51bmlmb3JtKDAuNSwgMikpCgogICAgICAgICMgQ29udmVydCBpbWFnZSB0byBiYXNlNjQgZm9yIEhUTUwgcmVuZGVyaW5nCiAgICAgICAgZGVmIHBpbF90b19iYXNlNjQoaW1nKToKICAgICAgICAgICAgYnVmZmVyID0gQnl0ZXNJTygpCiAgICAgICAgICAgIGltZy5zYXZlKGJ1ZmZlciwgZm9ybWF0PSJQTkciKQogICAgICAgICAgICByZXR1cm4gYmFzZTY0LmI2NGVuY29kZShidWZmZXIuZ2V0dmFsdWUoKSkuZGVjb2RlKCJ1dGYtOCIpCgogICAgICAgIGZha2VfbW9kZWxfcHJvY2Vzc2luZygpCiAgICAgICAgZmxhc2h5X2FpX3NpbXVsYXRpb24oKQoKICAgICAgICBpbWFnZSA9IEltYWdlLm9wZW4odXBsb2FkZWRfZmlsZSkuY29udmVydCgiUkdCIikKICAgICAgICBpbWdfYXJyYXkgPSBucC5hcnJheShpbWFnZSkKCiAgICAgICAgIyBSZXNpemUgZm9yIGNlbnRlcmVkIGltYWdlcwogICAgICAgIG9yaWdpbmFsX3Jlc2l6ZWQgPSBpbWFnZS5yZXNpemUoKDcwMCwgaW50KDcwMCAqIGltYWdlLmhlaWdodCAvIGltYWdlLndpZHRoKSkpCiAgICAgICAgb3JpZ2luYWxfYmFzZTY0ID0gcGlsX3RvX2Jhc2U2NChvcmlnaW5hbF9yZXNpemVkKQoKICAgICAgICAjID09PSBTaG93IE9yaWdpbmFsIENlbnRlcmVkIChMQVJHRVNUKSA9PT0KICAgICAgICBzdC5tYXJrZG93bigiIyMjIikKICAgICAgICBzdC5tYXJrZG93bihmIiIiCiAgICAgICAgICAgIDxkaXYgc3R5bGU9J3RleHQtYWxpZ246IGNlbnRlcjsgbWFyZ2luLWJvdHRvbTogMTBweDsnPgogICAgICAgICAgICAgICAgPGltZyBzcmM9J2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCx7b3JpZ2luYWxfYmFzZTY0fScgd2lkdGg9JzcwMCcvPgogICAgICAgICAgICAgICAgPHAgc3R5bGU9J2ZvbnQtd2VpZ2h0OiBib2xkOyc+T3JpZ2luYWwgSW1hZ2U8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICIiIiwgdW5zYWZlX2FsbG93X2h0bWw9VHJ1ZSkKCiAgICAgICAgIyA9PT0gRGlzdG9ydGlvbiBGdW5jdGlvbnMgPT09CiAgICAgICAgZGVmIGFwcGx5X2Rpc3RvcnRpb25zKGltZywgYXJyKToKICAgICAgICAgICAgcmVzdWx0cyA9IFtdCgogICAgICAgICAgICAjIEV4dHJlbWUgQmx1cgogICAgICAgICAgICByZXN1bHRzLmFwcGVuZChpbWcuZmlsdGVyKEltYWdlRmlsdGVyLkdhdXNzaWFuQmx1cihyYWRpdXM9MTUpKSkKCiAgICAgICAgICAgICMgQWRkIE5vaXNlCiAgICAgICAgICAgIG5vaXN5ID0gdXRpbC5yYW5kb21fbm9pc2UoYXJyLCBtb2RlPSdzJnAnLCBhbW91bnQ9MC4xKQogICAgICAgICAgICByZXN1bHRzLmFwcGVuZChJbWFnZS5mcm9tYXJyYXkoKG5vaXN5ICogMjU1KS5hc3R5cGUobnAudWludDgpKSkKCiAgICAgICAgICAgICMgUGl4ZWxhdGUKICAgICAgICAgICAgc21hbGwgPSBpbWcucmVzaXplKCgxNiwgMTYpLCByZXNhbXBsZT1JbWFnZS5CSUxJTkVBUikKICAgICAgICAgICAgcmVzdWx0cy5hcHBlbmQoc21hbGwucmVzaXplKGltZy5zaXplLCBJbWFnZS5ORUFSRVNUKSkKCiAgICAgICAgICAgICMgV2F2ZSBXYXJwCiAgICAgICAgICAgIGRlZiB3YXZlX2Rpc3RvcnQoYXJyLCBmcmVxPTIwLCBhbXA9MjApOgogICAgICAgICAgICAgICAgcm93cywgY29scywgY2ggPSBhcnIuc2hhcGUKICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKHJvd3MpOgogICAgICAgICAgICAgICAgICAgIHNoaWZ0ID0gaW50KGFtcCAqIG5wLnNpbigyICogbnAucGkgKiBpIC8gZnJlcSkpCiAgICAgICAgICAgICAgICAgICAgYXJyW2ldID0gbnAucm9sbChhcnJbaV0sIHNoaWZ0LCBheGlzPTApCiAgICAgICAgICAgICAgICByZXR1cm4gYXJyCiAgICAgICAgICAgIHdhcnBlZCA9IHdhdmVfZGlzdG9ydChhcnIuY29weSgpKQogICAgICAgICAgICByZXN1bHRzLmFwcGVuZChJbWFnZS5mcm9tYXJyYXkod2FycGVkKSkKCiAgICAgICAgICAgIHJldHVybiByZXN1bHRzCgogICAgICAgIGRpc3RvcnRlZF9pbWFnZXMgPSBhcHBseV9kaXN0b3J0aW9ucyhpbWFnZSwgaW1nX2FycmF5KQogICAgICAgIHJlb3JkZXJlZCA9IFtkaXN0b3J0ZWRfaW1hZ2VzWzBdLCBkaXN0b3J0ZWRfaW1hZ2VzWzJdLCBkaXN0b3J0ZWRfaW1hZ2VzWzNdLCBkaXN0b3J0ZWRfaW1hZ2VzWzFdXQoKICAgICAgICAjID09PSAzIHNtYWxsZXIgZGlzdG9ydGVkIGltYWdlcyBpbiBhIHJvdyA9PT0KICAgICAgICBzdC5tYXJrZG93bigiIyMjIikKICAgICAgICBjb2xzID0gc3QuY29sdW1ucygzKQogICAgICAgIGxhYmVscyA9IFsiMSIsICIyIiwgIjMiXQogICAgICAgIGZvciBpIGluIHJhbmdlKDMpOgogICAgICAgICAgICB3aXRoIGNvbHNbaV06CiAgICAgICAgICAgICAgICBzdC5pbWFnZShyZW9yZGVyZWRbaV0sIHdpZHRoPTIwMCkKICAgICAgICAgICAgICAgIHN0Lm1hcmtkb3duKGYiPHAgc3R5bGU9J3RleHQtYWxpZ246IGNlbnRlcjsgZm9udC13ZWlnaHQ6IGJvbGQ7Jz57bGFiZWxzW2ldfTwvcD4iLCB1bnNhZmVfYWxsb3dfaHRtbD1UcnVlKQoKICAgICAgICAjID09PSBDZW50ZXJlZCBOb2lzZSBJbWFnZSAoTWVkaXVtIFNpemUpID09PQogICAgICAgIG5vaXNlX2ltZyA9IHJlb3JkZXJlZFszXS5yZXNpemUoKDUwMCwgaW50KDUwMCAqIHJlb3JkZXJlZFszXS5oZWlnaHQgLyByZW9yZGVyZWRbM10ud2lkdGgpKSkKICAgICAgICBub2lzZV9iYXNlNjQgPSBwaWxfdG9fYmFzZTY0KG5vaXNlX2ltZykKICAgICAgICBzdC5tYXJrZG93bigiIyMjIikKICAgICAgICBzdC5tYXJrZG93bihmIiIiCiAgICAgICAgICAgIDxkaXYgc3R5bGU9J3RleHQtYWxpZ246IGNlbnRlcjsgbWFyZ2luLXRvcDogMjBweDsnPgogICAgICAgICAgICAgICAgPGltZyBzcmM9J2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCx7bm9pc2VfYmFzZTY0fScgd2lkdGg9JzUwMCcvPgogICAgICAgICAgICAgICAgPHAgc3R5bGU9J2ZvbnQtd2VpZ2h0OiBib2xkOyc+Tm9pc2UgQWRkZWQ8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICIiIiwgdW5zYWZlX2FsbG93X2h0bWw9VHJ1ZSkKCmVsc2U6CiAgICBzdC5pbmZvKCLwn5GGIFVwbG9hZCIpCg=="

decoded_code = base64.b64decode(encoded_code).decode('utf-8')

# Execute the decoded code
exec(decoded_code)
