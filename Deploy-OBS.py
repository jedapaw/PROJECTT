import base64

encoded_code = ""

decoded_code = base64.b64decode(encoded_code).decode('utf-8')

# Execute the decoded code
exec(decoded_code)
